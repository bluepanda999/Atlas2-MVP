version: '3.8'

services:
  # Web Application (Nginx + React)
  atlas2-web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    environment:
      - NODE_ENV=production
    depends_on:
      - atlas2-api
    restart: unless-stopped
    networks:
      - atlas2-network

  # API Processing Service
  atlas2-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://atlas2:${POSTGRES_PASSWORD}@postgres:5432/atlas2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100}
      - API_TIMEOUT=${API_TIMEOUT:-30000}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - atlas2-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=atlas2
      - POSTGRES_USER=atlas2
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backup:/backup
    restart: unless-stopped
    networks:
      - atlas2-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - atlas2-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # File Processing Worker
  atlas2-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - uploads:/app/uploads
      - ./logs:/app/logs
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://atlas2:${POSTGRES_PASSWORD}@postgres:5432/atlas2
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MAX_FILE_SIZE=3221225472
      - CHUNK_SIZE=65536
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - atlas2-network
    deploy:
      replicas: 2

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - atlas2-network

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - atlas2-network

volumes:
  postgres_data:
  redis_data:
  uploads:
  prometheus_data:
  grafana_data:

networks:
  atlas2-network:
    driver: bridge